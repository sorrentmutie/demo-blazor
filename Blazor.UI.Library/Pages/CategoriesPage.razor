@page "/categories"
@inject IJSRuntime jsRuntime
@inject ICategoriesData service


<MySpinner IsVisible="showLoader"></MySpinner>
<p>@message</p>

@if(category is null)
{
    @if (categories is not null)
    {
        <button @onclick="() => AddCategory()" class="btn btn-info mb-3">Add a new Category</button>
        <CategoriesList Categories="categories" OnEdit="EditCategory" OnDelete="DeleteCategory"/>
    }
    else
    {
        <p>@categoriesMessage</p>
    }

} else
{
    <Details TItem="CategoryDTO" Item="category" OnCancel="Cancel" OnSave="Save" Context="category" >
        <ChildContent>

            <MyInputText Id="name" Label="Nome" @bind-Value="category.Name"></MyInputText>
            <MyInputText Id="description" Label="Description" @bind-Value="category.Description"></MyInputText>
        </ChildContent>
    </Details>
}

<MyModal Id="myM" Title=@("Sicuro di cancellare " + selectedCategory?.Name + " ?") OnSave="SaveModal">
    <ChildContent>
        <p>@selectedCategory?.Name</p>
        <p>@selectedCategory?.Description</p>
    </ChildContent>
</MyModal>





@code {
    private List<CategoryDTO>? categories;
    private CategoryDTO? category;
    private CategoryDTO? selectedCategory;
    private string message = string.Empty;
    private string categoriesMessage = string.Empty;
    private bool showLoader = false;

    private async Task SaveModal()
    {
        if (selectedCategory is not null)
        {
            var res = await service.DeleteCategoryAsync(selectedCategory);
            await jsRuntime.InvokeVoidAsync("nascondiModale");
            if(!res)
            {
                await jsRuntime.InvokeVoidAsync("showNotification");
                message = "Non è possibile cancellare la categoria " + selectedCategory.Name;
            }
            await LoadData();
        }
    }

    private async Task DeleteCategory(CategoryDTO categoryToRemove)
    {
        selectedCategory = categoryToRemove;
        await jsRuntime.InvokeVoidAsync("mostraModale", "myM");
    }

    private async Task Save(CategoryDTO newCategory)
    {
        if(newCategory.Id == 0)
        {
            await service.AddCategoryAsync(newCategory);
        }
        else
        {
            await service.UpdateCategoryAsync(newCategory);
        }

        category = null;
        await LoadData();
    }

    private void Cancel()
    {
        category = null;
    }

    private void EditCategory(CategoryDTO editCategory)
    {
        this.category = editCategory;
    }

    private void AddCategory()
    {
        category = new CategoryDTO() { Name = "", Description  = ""};
    }


    private async Task LoadData()
    {
        showLoader = true;
        var data = await service.GetCategoriesAsync();

        categoriesMessage = data?.Count() == 0 ? "Non ci sono categorie." : string.Empty;

        if (data is not null)
        {
            categories = data.ToList();
        }
        showLoader = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
}
